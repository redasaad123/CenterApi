name: 2 - Ansible Configuration

on:
  repository_dispatch:
    types: [terraform-completed]
  workflow_dispatch:  # ÿ™ÿ¥ÿ∫ŸäŸÑ ŸäÿØŸàŸä
    inputs:
      public_ip:
        description: 'Server Public IP'
        required: true
        type: string
jobs:
  ansible:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Public IP
        id: get_ip
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            PUBLIC_IP="${{ github.event.client_payload.public_ip }}"
          else
            PUBLIC_IP="${{ inputs.public_ip }}"
          fi
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "üåê Target IP: $PUBLIC_IP"

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get_ip.outputs.public_ip }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Wait for SSH
        run: |
          echo "‚è≥ Waiting for SSH to be ready..."
          for i in {1..30}; do
            if ssh -o ConnectTimeout=5 adminuser@${{ steps.get_ip.outputs.public_ip }} 'echo SSH Ready' 2>/dev/null; then
              echo "‚úÖ SSH is ready!"
              exit 0
            fi
            echo "Attempt $i/30..."
            sleep 10
          done
          echo "‚ùå SSH connection timeout"
          exit 1

      - name: Ensure Python 3.12 is installed on remote
        run: |
          echo "üì¶ Installing Python 3.12 on remote server..."
          ssh -o StrictHostKeyChecking=no adminuser@${{ steps.get_ip.outputs.public_ip }} 'bash -s' << 'ENDSSH'
            #!/bin/bash

            # ÿØÿßŸÑÿ© ŸÑÿ∑ÿ®ÿßÿπÿ© ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°
            error_exit() {
              echo "‚ùå Error: $1"
              exit 1
            }

            # ÿ•ÿµŸÑÿßÿ≠ ŸÖÿ¥ŸÉŸÑÿ© cnf-update-db
            echo "üîß Fixing apt configuration..."
            sudo rm -f /etc/apt/apt.conf.d/50command-not-found

            # ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÜÿ∏ÿßŸÖ
          error_exit() {
            echo "‚ùå Error: $1"
            exit 1
          }
          
          # ÿ•ÿµŸÑÿßÿ≠ ŸÖÿ¥ŸÉŸÑÿ© cnf-update-db
          echo "üîß Fixing apt configuration..."
          sudo rm -f /etc/apt/apt.conf.d/50command-not-found
          
          # ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÜÿ∏ÿßŸÖ
          echo "üì¶ Updating package list..."
          sudo apt-get update -y || error_exit "Failed to update package list"
          
          # ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑÿ£ÿØŸàÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
          echo "üì¶ Installing software-properties-common..."
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common || error_exit "Failed to install software-properties-common"
          
          # ÿ•ÿ∂ÿßŸÅÿ© PPA
          echo "‚ûï Adding deadsnakes PPA..."
          sudo add-apt-repository -y ppa:deadsnakes/ppa || error_exit "Failed to add PPA"
          sudo apt-get update -y || error_exit "Failed to update after adding PPA"
          
          # ÿ™ÿ´ÿ®Ÿäÿ™ Python 3.12
          echo "üêç Installing Python 3.12..."
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            python3.12 \
            python3.12-venv \
            python3.12-dev \
            python3-apt || error_exit "Failed to install Python 3.12"
          
          # ÿ•ŸÜÿ¥ÿßÿ° ÿ±ÿßÿ®ÿ∑
          echo "üîó Setting Python 3.12 as default..."
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 || error_exit "Failed to set Python alternative"
          
          # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™
          echo "‚úÖ Verifying installation..."
          python3 --version || error_exit "Python 3.12 not found"
          
          echo "üéâ Python 3.12 installed successfully!"
          ENDSSH
      - name: Create Ansible Inventory
        run: |
          mkdir -p ./ansible
          cat > ./ansible/inventory.ini << EOF
          [webservers]
          server ansible_host=${{ steps.get_ip.outputs.public_ip }} ansible_user=adminuser ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3
          EOF
          cat ./ansible/inventory.ini
          echo "üìù Inventory created"


      - name: Test Ansible Connection
        run: |
          ansible -i ./ansible/inventory.ini webservers -m ping

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ./ansible/inventory.ini ./ansible/playbook.yml

      - name: Configuration Complete
        run: |
          echo "üéâ ========================================="
          echo "‚úÖ Server configured successfully!"
          echo "üåê Server IP: ${{ steps.get_ip.outputs.public_ip }}"
          echo "üîó Access: http://${{ steps.get_ip.outputs.public_ip }}"
          echo "=========================================="