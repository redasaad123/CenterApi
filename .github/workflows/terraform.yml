name: CI/CD for Terraform Project

on:
  push:
    branches:
      - master
    paths:
      - 'Terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:


jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_subscription_id: ${{ secrets.SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.TENANT_ID }}
      TF_VAR_client_id: ${{ secrets.CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.CLIENT_SECRET }}


    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }}

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6
          terraform_wrapper: false

      - name: Remove .terraform directory
        run: |
          rm -rf ./Terraform/.terraform
          rm -rf ./Terraform/.terraform.lock.hcl

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./DevOps/Terraform

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./DevOps/Terraform

      # Plan Terraform deployment
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./DevOps/Terraform

      # Apply Terraform deployment
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve tfplan
        working-directory: ./DevOps/Terraform

      # Get Public IP - الخطوة المصلحة
      - name: Get Public IP
        id: get_ip
        working-directory: ./DevOps/Terraform
        run: |
          echo "📋 Checking available outputs..."
          terraform output
          PUBLIC_IP=$(terraform output -raw public_ip)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "✅ Public IP is: $PUBLIC_IP"
      
      - name: Display IP
        run: |
          echo "🌐 The server public IP is: ${{ steps.get_ip.outputs.public_ip }}"
          echo "🔗 You can access your server at: http://${{ steps.get_ip.outputs.public_ip }}"
      
      # خطوة اختيارية: حفظ الـ IP في ملف
      - name: Save Public IP to file
        run: |
          mkdir -p ./outputs
          echo "${{ steps.get_ip.outputs.public_ip }}" > ./outputs/server_ip.txt
          echo "Server deployed at: ${{ steps.get_ip.outputs.public_ip }}" > ./outputs/info.txt

      
      - name: Upload server info artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-info
          path: ./outputs/


      - name: Trigger Ansible Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          event-type: terraform-completed
          client-payload: '{"public_ip": "${{ steps.get_ip.outputs.public_ip }}"}'
          repository: redasaad123/CenterApi